params {
  // Main arguments
  reads = false
  singleEnd = false
  genome = false
  // Reads
  stranded = false
  adapter = "$baseDir/assets/no_adapter.txt"
  readlength = 48
  overhang = false
  mismatch = 2
  // Other
  skiprMATS = false
  skipMultiQC = false
  outdir = 'results'
  igenomes_base = 's3://ngi-igenomes/igenomes/'
}

process {
  container = 'lifebitai/splicing-pipelines-nf:latest'
  withName: 'rmats' {
      container = 'lifebitai/rmats:4.0.2'
  }
}

// Load base & igenomes.config by default
includeConfig 'conf/base.config'
includeConfig 'conf/igenomes.config'

profiles {
  docker { docker.enabled = true }
  test { includeConfig 'conf/test.config' }
  test_pe { includeConfig 'conf/test_pe.config' }
  sumner { includeConfig 'conf/executors/sumner.config' }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}